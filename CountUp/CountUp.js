{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "weight"
  },
  "name" : "CountUp",
  "script" : "\/\/Version 1.1 \n\/\/Sorry for my English. \n\/\/This Scriptable Widget is coded by eXtendedZero\n\/\/Very Thanks all known and unknown people whose codes parts I used. \n\n\/\/---CountUp widget---\n\/\/Description. \n\/\/Minimalistic widget that Count Up number full days from set date.\n\/\/\n\/\/Features.\n\/\/Ability to dynamically (without changing the code) configure\/change the widget.\n\/\/Setting title, date, time, color.\n\/\/Ability to use multiple copies of the widget with different settings.\n\/\/\n\/\/Setup. \n\/\/Easy installation. You only need to specify a unique ID for each copy of the widget.\n\/\/\n\/\/How to use.\n\/\/Add a widget and specify a unique ID in the Parameter. \n\/\/It can be a number\/numbers or a letter \/ word.  For example \"7\", \"1239\", \"new\", \"qwerty11\", etc. (without quotes).\n\/\/\n\/\/How it work.\n\/\/Tap the widget to set your own settings.  In the new window you can set\/change your own settings.\n\/\/â€¢Title - anything, even smileys (Warning!  Do not use the \"|\" symbol. This is a reserved character).\n\/\/â€¢Date - format dd.mm.yyyy\n\/\/â€¢Time - format hh:mm\n\/\/â€¢Color - you can use reserved keyword(base colors) or set color at format #rrggbb(hex). Reserved color keyword: red, green, blue, yellow, orange, gray, purple, brown, cyan, magenta. \n\n\/\/The current date and time are set by default. The title is \"Now ðŸ˜Ž\", the background color is red.\n\/\/\n\n\/\/Some details. \n\/\/Each copy of the widget creates a unique file based on a given ID where the settings match.\n\/\/\n\nvar widgetId = args.widgetParameter;\nvar fm = FileManager.iCloud()\nvar dir = fm.documentsDirectory()\nvar path = fm.joinPath(dir, \"CountUpSet_\"+widgetId+\".txt\")\n\nif (!fm.fileExists(path))   \n  {\n  let td = new Date\n  let d = new Intl.DateTimeFormat(\"es\",{day: \"2-digit\"}).format(td)\n  let m = new Intl.DateTimeFormat(\"es\",{month: \"2-digit\"}).format(td)\n  let y = new Intl.DateTimeFormat(\"es\",{year: \"numeric\"}).format(td)\n  let h = new Intl.DateTimeFormat(\"es\",{hour: \"2-digit\"}).format(td)\n  let mi = new Intl.DateTimeFormat(\"es\",{minute: \"2-digit\"}).format(td)\n  \n  fm.writeString(path, \"Now ðŸ˜Ž|\"+`${d}.${m}.${y}`+\"|\"+`${h}:${mi}`+\"|red\")\n  }\n\n\/\/load and parse data from file line by line\n\/\/t0 - title\n\/\/t1 - date -> dd.mm.yyyy\n\/\/t2 - time -> hh:mm\n\/\/t3 - color -> Color: #rrggbb(hex) or keyword(base colors)\nvar mydatR = fm.readString(path)  \nvar arr = mydatR.split(\"|\")\nvar t0 = arr[0]\nvar t1 = arr[1]\nvar t2 = arr[2]\nvar t3 = arr[3]\n\nlet day0 = t1.split(\".\")\nlet time0 = t2.split(\":\")\n\nvar mydat = new Date(parseInt(day0[2],10),parseInt(day0[1]-1, 10),parseInt(day0[0],10),parseInt(time0[0], 10),parseInt(time0[1],10),0,0)\n\nvar today = new Date\n\nif (config.runsInWidget) {\n  \n  \/\/title\n  titl = t0\n  \n  \/\/date\n  let date = today.getDate()  \n  \n\/\/To calc the time difference of two dates \n  let Dif_Time = today.getTime()- mydat.getTime()\n  \n  \n\/\/To calc the no. of days between two dates \n  var Dif_Days = Math.trunc(Dif_Time \/ (1000 * 3600 * 24)); \n\n  let widget = createWidget(titl, `${Dif_Days}`, 'Start at', t1+\", \"+t2, t3)\n  \n  Script.setWidget(widget)\n  Script.complete()\n} \n\nif (config.runsInApp)\n{\nvar myTextInput = new Alert()\nmyTextInput.title = \"Settings:\"\nmyTextInput.addAction(\"Ok\") \nmyTextInput.addCancelAction(\"Cancel\") \n\nmyTextInput.addTextField(\"Title:\", t0)\nmyTextInput.addTextField(\"Date: dd.mm.yyyy\", t1)\nmyTextInput.addTextField(\"Time: Ð³Ð³-Ñ…Ñ…\", t2);\nmyTextInput.addTextField(\"Color: #rrggbb(hex) or keyword(base colors)\", t3);\n\nlet inPut = await myTextInput.presentAlert()\n\nlet mydatW = myTextInput.textFieldValue(0)+\"|\"+myTextInput.textFieldValue(1)+\"|\"+myTextInput.textFieldValue(2)+\"|\"+myTextInput.textFieldValue(3)+\"|\"\n\nswitch(inPut)\n{\n  case 0:\n    \/\/Ok\n    fm.writeString(path, mydatW)\n    break;\n    \n  case -1:\n    \/\/Cancel\n    break;\n  }\n \n}\n\nfunction createWidget(pretitle, title, title2, subtitle, color) \n  {\n  let w = new ListWidget()\n  w.setPadding(7, 10, 7, 7)\n  \n  switch(color)\n  {\n  case \"red\":\n    color = \"ff0000\";\n    break;\n  case \"green\":\n    color = \"008000\";\n    break;\n  case \"blue\":\n    color = \"0000ff\";\n    break;\n  case \"yellow\":\n    color = \"ffd700\";\n    break;\n  case \"orange\":\n    color = \"ffa500\";\n    break;\n  case \"gray\":\n    color = \"808080\";\n    break;\n  case \"purple\":\n    color = \"0000ff\";\n    break;\n  case \"brown\":\n    color = \"a52a2a\";\n    break;\n  case \"cyan\":\n    color = \"00ffff\";\n    break;\n  case \"magenta\":\n    color = \"ff00ff\"\n    break;\n  }\n  w.backgroundColor = new Color(color)\n \n  let preTxt = w.addText(pretitle)  \n  preTxt.textColor = Color.white()\n  preTxt.textOpacity = 0.9\n  preTxt.font = Font.boldSystemFont(16)\n  \n  if (Dif_Days>999) {w.addSpacer(14)} else\n  {w.addSpacer(4)}\n  \n  let titleTxt = w.addText(title)\n  titleTxt.textColor = Color.white()\n  titleTxt.shadowColor = Color.black()\n  titleTxt.shadowOffset = new Point(1,1)\n  titleTxt.shadowRadius = 1\n  if (Dif_Days>999)\n  {\n  titleTxt.font = Font.boldSystemFont(40)\n  } else\n  {\n  titleTxt.font = Font.boldSystemFont(60)\n  }\n  titleTxt.centerAlignText()\n  \n    \n  if (Dif_Days>999) {w.addSpacer(12)} else\n  {w.addSpacer(6)}\n  \n  let titleTxt2 = w.addText(title2)\n  titleTxt2.textColor = Color.white()\n  titleTxt2.font = Font.boldSystemFont(11)\n  \n  w.addSpacer(0)\n  let subTxt = w.addText(subtitle)\n  subTxt.textColor = Color.white()\n  subTxt.textOpacity = 1.0\n  subTxt.font = Font.systemFont(11)\n  return w\n}\n \n",
  "share_sheet_inputs" : [

  ]
}